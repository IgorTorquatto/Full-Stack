1 - Atualize o service Note colocando:

update: (id, params) => Api.put(`/notes/${id}`, params, {
  headers: {'x-access-token': localStorage.getItem('token')}
}),

2 - Inclua no component Note:

const updateNote = async (oldNote, params) => {
  const updatedNote = await NoteService.update(oldNote._id, params);
  const index = notes.indexOf(oldNote);
  const newNotes = notes;
  newNotes[index] = updatedNote.data;
  setNotes(newNotes);
  setCurrentNote(updatedNote.data);
}

3 - Agora atualize a inclusão do Editor:

<Editor
  note={current_note}
  updateNote={updateNote}
/>

3 - No component Note Editor:

a - Adicione a função para atualizar a nota:

const updateNote = (content) => {
  const title = content.replace(/(<([^>]+)>)/ig, "").slice(0, 30);
  props.updateNote(props.note, {'title': title, 'body': content})
}

b - Adicione um state para controlar o timer (que vai analisar se o usuário parou de digitar)

const [timer, setTimer] = useState(null)

c - Adicione a função que será chamada pelo Quill Editor quando o usuário mudar algo no conteúdo:

const handleChange = (content, delta, source) =>{
  clearTimeout(timer);
  if(source == 'user'){
    setCurrentContent(content)
    setTimer(setTimeout(() => updateNote(content), 2000))
  }
}

Ps: Essa função dispara um timer de 2 segundo, se o usuário mudar algo no texto dentro desse periodo a atualização do conteúdo é cancelada e um novo timer é startado.

d - Atualize a chamada do ReactQuill para passar as funções:

<ReactQuill value={currentContent} onChange={handleChange} modules={modules}/>


​

Avalie esta aula:
