1 - Crie o component de listagem:

mkdir src/components/notes/list
touch src/components/notes/list/index.js

2 - Crie um novo service:

touch src/services/note.js

3 - Coloque nele:

import Api from "./api";

const NoteService = {
  index: () => Api.get("/notes", {
    headers: {'x-access-token': localStorage.getItem('token')}
  }),
}

export default NoteService;

4 - Coloque no component List:

import React, { Fragment } from 'react';
import { Button, Column, Tag, Title, List } from "rbx";
import Moment from 'moment';

function ListNotes(props) {
  return (
    <Fragment>
      <Column.Group breakpoint="mobile">
        <Column size={6} offset={1}>
          <Title size={6}>
            {props.notes.length} Notes
          </Title>
        </Column>
      </Column.Group>
      <List className="notes-list">
        {props.notes.map((item, key) =>
          <List.Item key={key} onClick={() => props.selectNote(item._id)} active={item == props.current_note}>
            <Title size={6}>
              {item.title.replace(/(<([^>]+)>)/ig, "").substring(0,15)}
            </Title>
            <Title size={6} subtitle spaced={false}>
              {item.body.replace(/(<([^>]+)>)/ig, "").substring(0,30)}
            </Title>

            <Column.Group breakpoint="mobile">
              <Column size={10}>
                <Tag color="dark">
                  {Moment(item.created_at).format('DD/MM')}
                </Tag>
              </Column>
            </Column.Group>
          </List.Item>
        )}
      </List>
    </Fragment>
  )
}

export default ListNotes;

5 - Atualize o component Notes:

...
import List from "../notes/list";
import NoteService from '../../services/note';
...

function Notes(props) {
  const [notes, setNotes] = useState([]);
  const [current_note, setCurrentNote] = useState({ title: "", body: "", id: "" });

  useEffect(() => {
    fetchNotes();
  }, []);

  async function fetchNotes() {
    const response = await NoteService.index();
    if (response.data.length >= 1) {
      setNotes(response.data.reverse())
      setCurrentNote(response.data[0])
    }
  }

  const selectNote = (id) => {
    const note = notes.find((note) => {
      return note._id == id;
    })
    setCurrentNote(note);
  }

  return (
    <Fragment>
      <div className="notes" id="notes">
        <Menu 
          pageWrapId={"notes-editor"} 
          isOpen={ props.isOpen }
          onStateChange={(state) => props.setIsOpen(state.isOpen)}
          disableAutoFocus 
          outerContainerId={"notes"}
          customBurgerIcon={ false }
          customCrossIcon={ false }
        >
          <List
            notes={notes}
            selectNote={selectNote}
            current_note={current_note} />
        </Menu>


        <Column size={12} className="notes-editor" id="notes-editor">
          Editor...
        </Column>
      </div>
    </Fragment>
  )
}

export default Notes;

6 - Inclua no notes.scss dentro de .notes:

.list-item.is-active{
  background-color: #e4e4e4;
}