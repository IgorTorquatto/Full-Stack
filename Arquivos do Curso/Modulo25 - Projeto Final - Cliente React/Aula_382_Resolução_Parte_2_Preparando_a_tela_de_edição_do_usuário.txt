    Na Screen Users Edit (/users/edit/index.js):

    import React, { Fragment } from 'react';
    import { Column, Section, Title, Container, Card, Button } from "rbx";
    import "../../../styles/users.scss";
    import HeaderLogged from "../../../components/header_logged";


    const UserEdit = () => (
      <Fragment>
        <HeaderLogged />
        <Section size="medium" className="users">
          <Container>
            <Column.Group centered className="users-edit">
              <Column size={4}>
                <Title size={5} className="has-text-grey has-text-left">
                  Informações Pessoais
                </Title>
                <Card>
                  <Card.Content>
                    Users Edit Form...
                  </Card.Content>
                </Card>
              </Column>
            </Column.Group>

            <Column.Group centered className="users-edit">
              <Column size={4}>
                <Title size={5} className="has-text-grey has-text-left">
                  Password
                </Title>
                <Card>
                  <Card.Content>
                    Users Edit Password Form...
                  </Card.Content>
                </Card>
              </Column>
            </Column.Group>
            <Column.Group centered>
              <Column size={4} className="has-text-right">
                Users Delete Button...
              </Column>
            </Column.Group>
          </Container>
        </Section>
      </Fragment>
    );

    export default UserEdit;

    Crie um style chamado users.css e coloque nele:

    @import "./custom_colors";

    .users{
      padding-top: 40px !important;

      .card-content{
        padding: 40px;
      }
      .users-edit{
        .title{
       margin-bottom: 15px;
        }
      }
    }

    No cliente, inclua o update no service User:

    update: async (params) => {
      const response = await Api.put("/users", params, {
        headers: {'x-access-token': localStorage.getItem('token')}
      })
      localStorage.setItem('user', JSON.stringify(response.data));
    },

    Inclua agora o updatePassword:

    updatePassword: async (params) => {
      await Api.put("/users/password", params, {
        headers: {'x-access-token': localStorage.getItem('token')}
      })
    },

    Por fim, inclua o service de delete:

    delete: async () => {
      await Api.delete("/users", {
        headers: {'x-access-token': localStorage.getItem('token')}
      })
      localStorage.removeItem('user', null);
     localStorage.removeItem('token', null);
    }​